 Percent |	Source code & Disassembly of minisat_HACK_999ED_CSSC_static for cycles:u (1 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000048d2e0 <__strlen_avx2>:
    0.00 :   48d2e0: endbr64
  100.00 :   48d2e4: mov    %edi,%eax
    0.00 :   48d2e6: mov    %rdi,%rdx
    0.00 :   48d2e9: vpxor  %xmm0,%xmm0,%xmm0
    0.00 :   48d2ed: and    $0xfff,%eax
    0.00 :   48d2f2: cmp    $0xfe0,%eax
    0.00 :   48d2f7: ja     48d430 <__strlen_avx2+0x150>
    0.00 :   48d2fd: vpcmpeqb (%rdi),%ymm0,%ymm1
    0.00 :   48d301: vpmovmskb %ymm1,%eax
    0.00 :   48d305: test   %eax,%eax
    0.00 :   48d307: je     48d360 <__strlen_avx2+0x80>
    0.00 :   48d309: tzcnt  %eax,%eax
    0.00 :   48d30d: vzeroupper
    0.00 :   48d310: ret
    0.00 :   48d311: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   48d31c: nopl   0x0(%rax)
    0.00 :   48d320: tzcnt  %eax,%eax
    0.00 :   48d324: sub    %edx,%edi
    0.00 :   48d326: inc    %edi
    0.00 :   48d328: add    %edi,%eax
    0.00 :   48d32a: vzeroupper
    0.00 :   48d32d: ret
    0.00 :   48d32e: xchg   %ax,%ax
    0.00 :   48d330: tzcnt  %eax,%eax
    0.00 :   48d334: sub    %edx,%edi
    0.00 :   48d336: add    $0x21,%edi
    0.00 :   48d339: add    %edi,%eax
    0.00 :   48d33b: vzeroupper
    0.00 :   48d33e: ret
    0.00 :   48d33f: nop
    0.00 :   48d340: tzcnt  %eax,%eax
    0.00 :   48d344: sub    %edx,%edi
    0.00 :   48d346: add    $0x41,%edi
    0.00 :   48d349: add    %edi,%eax
    0.00 :   48d34b: vzeroupper
    0.00 :   48d34e: ret
    0.00 :   48d34f: nop
    0.00 :   48d350: tzcnt  %eax,%eax
    0.00 :   48d354: sub    %edx,%edi
    0.00 :   48d356: add    $0x61,%edi
    0.00 :   48d359: add    %edi,%eax
    0.00 :   48d35b: vzeroupper
    0.00 :   48d35e: ret
    0.00 :   48d35f: nop
    0.00 :   48d360: or     $0x1f,%rdi
    0.00 :   48d364: vpcmpeqb 0x1(%rdi),%ymm0,%ymm1
    0.00 :   48d369: vpmovmskb %ymm1,%eax
    0.00 :   48d36d: test   %eax,%eax
    0.00 :   48d36f: jne    48d320 <__strlen_avx2+0x40>
    0.00 :   48d371: vpcmpeqb 0x21(%rdi),%ymm0,%ymm1
    0.00 :   48d376: vpmovmskb %ymm1,%eax
    0.00 :   48d37a: test   %eax,%eax
    0.00 :   48d37c: jne    48d330 <__strlen_avx2+0x50>
    0.00 :   48d37e: vpcmpeqb 0x41(%rdi),%ymm0,%ymm1
    0.00 :   48d383: vpmovmskb %ymm1,%eax
    0.00 :   48d387: test   %eax,%eax
    0.00 :   48d389: jne    48d340 <__strlen_avx2+0x60>
    0.00 :   48d38b: vpcmpeqb 0x61(%rdi),%ymm0,%ymm1
    0.00 :   48d390: vpmovmskb %ymm1,%eax
    0.00 :   48d394: test   %eax,%eax
    0.00 :   48d396: jne    48d350 <__strlen_avx2+0x70>
    0.00 :   48d398: inc    %rdi
    0.00 :   48d39b: or     $0x7f,%rdi
    0.00 :   48d39f: nop
    0.00 :   48d3a0: vmovdqa 0x1(%rdi),%ymm1
    0.00 :   48d3a5: vpminub 0x21(%rdi),%ymm1,%ymm2
    0.00 :   48d3aa: vmovdqa 0x41(%rdi),%ymm3
    0.00 :   48d3af: vpminub 0x61(%rdi),%ymm3,%ymm4
    0.00 :   48d3b4: vpminub %ymm2,%ymm4,%ymm5
    0.00 :   48d3b8: vpcmpeqb %ymm5,%ymm0,%ymm5
    0.00 :   48d3bc: vpmovmskb %ymm5,%ecx
    0.00 :   48d3c0: sub    $0xffffffffffffff80,%rdi
    0.00 :   48d3c4: test   %ecx,%ecx
    0.00 :   48d3c6: je     48d3a0 <__strlen_avx2+0xc0>
    0.00 :   48d3c8: vpcmpeqb %ymm1,%ymm0,%ymm1
    0.00 :   48d3cc: vpmovmskb %ymm1,%eax
    0.00 :   48d3d0: sub    %rdx,%rdi
    0.00 :   48d3d3: test   %eax,%eax
    0.00 :   48d3d5: jne    48d410 <__strlen_avx2+0x130>
    0.00 :   48d3d7: vpcmpeqb %ymm2,%ymm0,%ymm2
    0.00 :   48d3db: vpmovmskb %ymm2,%eax
    0.00 :   48d3df: test   %eax,%eax
    0.00 :   48d3e1: jne    48d420 <__strlen_avx2+0x140>
    0.00 :   48d3e3: vpcmpeqb %ymm3,%ymm0,%ymm3
    0.00 :   48d3e7: vpmovmskb %ymm3,%eax
    0.00 :   48d3eb: shl    $0x20,%rcx
    0.00 :   48d3ef: or     %rcx,%rax
    0.00 :   48d3f2: tzcnt  %rax,%rax
    0.00 :   48d3f7: sub    $0x3f,%rdi
    0.00 :   48d3fb: add    %rdi,%rax
    0.00 :   48d3fe: vzeroupper
    0.00 :   48d401: ret
    0.00 :   48d402: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   48d40d: nopl   (%rax)
    0.00 :   48d410: tzcnt  %eax,%eax
    0.00 :   48d414: sub    $0x7f,%rdi
    0.00 :   48d418: add    %rdi,%rax
    0.00 :   48d41b: vzeroupper
    0.00 :   48d41e: ret
    0.00 :   48d41f: nop
    0.00 :   48d420: tzcnt  %eax,%eax
    0.00 :   48d424: sub    $0x5f,%rdi
    0.00 :   48d428: add    %rdi,%rax
    0.00 :   48d42b: vzeroupper
    0.00 :   48d42e: ret
    0.00 :   48d42f: nop
    0.00 :   48d430: or     $0x1f,%rdi
    0.00 :   48d434: vpcmpeqb -0x1f(%rdi),%ymm0,%ymm1
    0.00 :   48d439: vpmovmskb %ymm1,%eax
    0.00 :   48d43d: sarx   %edx,%eax,%eax
    0.00 :   48d442: test   %eax,%eax
    0.00 :   48d444: je     48d364 <__strlen_avx2+0x84>
    0.00 :   48d44a: tzcnt  %eax,%eax
    0.00 :   48d44e: vzeroupper
    0.00 :   48d451: ret
 Percent |	Source code & Disassembly of minisat_HACK_999ED_CSSC_static for cycles:u (1 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000043ebd0 <get_common_indices.constprop.0>:
    0.00 :   43ebd0: push   %rbx
    0.00 :   43ebd1: test   %rdi,%rdi
    0.00 :   43ebd4: je     43ec2e <get_common_indices.constprop.0+0x5e>
    0.00 :   43ebd6: mov    %rdx,%r8
    0.00 :   43ebd9: mov    %rcx,%r9
    0.00 :   43ebdc: mov    $0x1,%eax
    0.00 :   43ebe1: cpuid
  100.00 :   43ebe3: mov    %edx,0xfa377(%rip)        # 538f60 <_dl_x86_cpu_features+0x20>
    0.00 :   43ebe9: mov    %eax,%edx
    0.00 :   43ebeb: shr    $0x8,%edx
    0.00 :   43ebee: mov    %ebx,0xfa364(%rip)        # 538f58 <_dl_x86_cpu_features+0x18>
    0.00 :   43ebf4: and    $0xf,%edx
    0.00 :   43ebf7: mov    %ecx,0xfa35f(%rip)        # 538f5c <_dl_x86_cpu_features+0x1c>
    0.00 :   43ebfd: mov    %eax,0xfa351(%rip)        # 538f54 <_dl_x86_cpu_features+0x14>
    0.00 :   43ec03: mov    %edx,(%rdi)
    0.00 :   43ec05: mov    %eax,%edx
    0.00 :   43ec07: shr    $0x4,%edx
    0.00 :   43ec0a: and    $0xf,%edx
    0.00 :   43ec0d: mov    %edx,(%rsi)
    0.00 :   43ec0f: mov    %eax,%edx
    0.00 :   43ec11: shr    $0xc,%edx
    0.00 :   43ec14: and    $0xf0,%edx
    0.00 :   43ec1a: mov    %edx,(%r8)
    0.00 :   43ec1d: mov    %eax,%edx
    0.00 :   43ec1f: and    $0xf,%edx
    0.00 :   43ec22: mov    %edx,(%r9)
    0.00 :   43ec25: cmpl   $0xf,(%rdi)
    0.00 :   43ec28: je     43ed3d <get_common_indices.constprop.0+0x16d>
    0.00 :   43ec2e: cmpl   $0x6,0xfa30f(%rip)        # 538f44 <_dl_x86_cpu_features+0x4>
    0.00 :   43ec35: jle    43ec7b <get_common_indices.constprop.0+0xab>
    0.00 :   43ec37: mov    $0x7,%esi
    0.00 :   43ec3c: xor    %ecx,%ecx
    0.00 :   43ec3e: mov    %esi,%eax
    0.00 :   43ec40: cpuid
    0.00 :   43ec42: mov    %eax,0xfa32c(%rip)        # 538f74 <_dl_x86_cpu_features+0x34>
    0.00 :   43ec48: mov    %esi,%eax
    0.00 :   43ec4a: mov    %ecx,0xfa32c(%rip)        # 538f7c <_dl_x86_cpu_features+0x3c>
    0.00 :   43ec50: mov    $0x1,%ecx
    0.00 :   43ec55: mov    %ebx,0xfa31d(%rip)        # 538f78 <_dl_x86_cpu_features+0x38>
    0.00 :   43ec5b: mov    %edx,0xfa31f(%rip)        # 538f80 <_dl_x86_cpu_features+0x40>
    0.00 :   43ec61: cpuid
    0.00 :   43ec63: mov    %eax,0xfa3ab(%rip)        # 539014 <_dl_x86_cpu_features+0xd4>
    0.00 :   43ec69: mov    %ebx,0xfa3a9(%rip)        # 539018 <_dl_x86_cpu_features+0xd8>
    0.00 :   43ec6f: mov    %ecx,0xfa3a7(%rip)        # 53901c <_dl_x86_cpu_features+0xdc>
    0.00 :   43ec75: mov    %edx,0xfa3a5(%rip)        # 539020 <_dl_x86_cpu_features+0xe0>
    0.00 :   43ec7b: cmpl   $0xc,0xfa2c2(%rip)        # 538f44 <_dl_x86_cpu_features+0x4>
    0.00 :   43ec82: jle    43eca8 <get_common_indices.constprop.0+0xd8>
    0.00 :   43ec84: mov    $0xd,%eax
    0.00 :   43ec89: mov    $0x1,%ecx
    0.00 :   43ec8e: cpuid
    0.00 :   43ec90: mov    %eax,0xfa31e(%rip)        # 538fb4 <_dl_x86_cpu_features+0x74>
    0.00 :   43ec96: mov    %ebx,0xfa31c(%rip)        # 538fb8 <_dl_x86_cpu_features+0x78>
    0.00 :   43ec9c: mov    %ecx,0xfa31a(%rip)        # 538fbc <_dl_x86_cpu_features+0x7c>
    0.00 :   43eca2: mov    %edx,0xfa318(%rip)        # 538fc0 <_dl_x86_cpu_features+0x80>
    0.00 :   43eca8: cmpl   $0x13,0xfa295(%rip)        # 538f44 <_dl_x86_cpu_features+0x4>
    0.00 :   43ecaf: jle    43ecd2 <get_common_indices.constprop.0+0x102>
    0.00 :   43ecb1: mov    $0x14,%eax
    0.00 :   43ecb6: xor    %ecx,%ecx
    0.00 :   43ecb8: cpuid
    0.00 :   43ecba: mov    %eax,0xfa394(%rip)        # 539054 <_dl_x86_cpu_features+0x114>
    0.00 :   43ecc0: mov    %ebx,0xfa392(%rip)        # 539058 <_dl_x86_cpu_features+0x118>
    0.00 :   43ecc6: mov    %ecx,0xfa390(%rip)        # 53905c <_dl_x86_cpu_features+0x11c>
    0.00 :   43eccc: mov    %edx,0xfa38e(%rip)        # 539060 <_dl_x86_cpu_features+0x120>
    0.00 :   43ecd2: cmpl   $0x18,0xfa26b(%rip)        # 538f44 <_dl_x86_cpu_features+0x4>
    0.00 :   43ecd9: jle    43ecfc <get_common_indices.constprop.0+0x12c>
    0.00 :   43ecdb: mov    $0x19,%eax
    0.00 :   43ece0: xor    %ecx,%ecx
    0.00 :   43ece2: cpuid
    0.00 :   43ece4: mov    %eax,0xfa34a(%rip)        # 539034 <_dl_x86_cpu_features+0xf4>
    0.00 :   43ecea: mov    %ebx,0xfa348(%rip)        # 539038 <_dl_x86_cpu_features+0xf8>
    0.00 :   43ecf0: mov    %ecx,0xfa346(%rip)        # 53903c <_dl_x86_cpu_features+0xfc>
    0.00 :   43ecf6: mov    %edx,0xfa344(%rip)        # 539040 <_dl_x86_cpu_features+0x100>
    0.00 :   43ecfc: cmpq   $0x0,0xfa21c(%rip)        # 538f20 <_dl_minsigstacksize>
    0.00 :   43ed04: jne    43ed2e <get_common_indices.constprop.0+0x15e>
    0.00 :   43ed06: cmpl   $0xc,0xfa237(%rip)        # 538f44 <_dl_x86_cpu_features+0x4>
    0.00 :   43ed0d: jle    43ed30 <get_common_indices.constprop.0+0x160>
    0.00 :   43ed0f: testb  $0x8,0xfa249(%rip)        # 538f5f <_dl_x86_cpu_features+0x1f>
    0.00 :   43ed16: je     43ed30 <get_common_indices.constprop.0+0x160>
    0.00 :   43ed18: mov    $0xd,%eax
    0.00 :   43ed1d: xor    %ecx,%ecx
    0.00 :   43ed1f: cpuid
    0.00 :   43ed21: lea    0x204(%rbx),%eax
    0.00 :   43ed27: mov    %rax,0xfa1f2(%rip)        # 538f20 <_dl_minsigstacksize>
    0.00 :   43ed2e: pop    %rbx
    0.00 :   43ed2f: ret
    0.00 :   43ed30: movq   $0x800,0xfa1e5(%rip)        # 538f20 <_dl_minsigstacksize>
    0.00 :   43ed3b: pop    %rbx
    0.00 :   43ed3c: ret
    0.00 :   43ed3d: shr    $0x14,%eax
    0.00 :   43ed40: movzbl %al,%eax
    0.00 :   43ed43: add    $0xf,%eax
    0.00 :   43ed46: mov    %eax,(%rdi)
    0.00 :   43ed48: mov    (%r8),%eax
    0.00 :   43ed4b: add    %eax,(%rsi)
    0.00 :   43ed4d: jmp    43ec2e <get_common_indices.constprop.0+0x5e>
 Percent |	Source code & Disassembly of minisat_HACK_999ED_CSSC_static for cycles:u (1 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000004a1be0 <_dl_aux_init>:
    0.00 :   4a1be0: endbr64
    0.00 :   4a1be4: mov    (%rdi),%rax
    0.00 :   4a1be7: mov    %rdi,0x9730a(%rip)        # 538ef8 <_dl_auxv>
    0.00 :   4a1bee: test   %rax,%rax
    0.00 :   4a1bf1: je     4a1fc8 <_dl_aux_init+0x3e8>
    0.00 :   4a1bf7: push   %r15
    0.00 :   4a1bf9: mov    %rdi,%rdx
    0.00 :   4a1bfc: xor    %r9d,%r9d
    0.00 :   4a1bff: xor    %r11d,%r11d
    0.00 :   4a1c02: push   %r14
    0.00 :   4a1c04: xor    %r15d,%r15d
    0.00 :   4a1c07: xor    %r14d,%r14d
    0.00 :   4a1c0a: xor    %r10d,%r10d
    0.00 :   4a1c0d: push   %r13
    0.00 :   4a1c0f: xor    %edi,%edi
    0.00 :   4a1c11: xor    %r13d,%r13d
    0.00 :   4a1c14: xor    %r8d,%r8d
    0.00 :   4a1c17: push   %r12
    0.00 :   4a1c19: xor    %esi,%esi
    0.00 :   4a1c1b: xor    %r12d,%r12d
    0.00 :   4a1c1e: lea    0x5e11b(%rip),%rcx        # 4ffd40 <__rseq_flags+0x138>
    0.00 :   4a1c25: push   %rbp
    0.00 :   4a1c26: xor    %ebp,%ebp
    0.00 :   4a1c28: push   %rbx
    0.00 :   4a1c29: xor    %ebx,%ebx
    0.00 :   4a1c2b: movb   $0x0,-0x3d(%rsp)
    0.00 :   4a1c30: movb   $0x0,-0x3e(%rsp)
    0.00 :   4a1c35: movb   $0x0,-0x3f(%rsp)
    0.00 :   4a1c3a: nopw   0x0(%rax,%rax,1)
    0.00 :   4a1c40: sub    $0x3,%rax
    0.00 :   4a1c44: cmp    $0x30,%rax
    0.00 :   4a1c48: ja     4a1c70 <_dl_aux_init+0x90>
    0.00 :   4a1c4a: movslq (%rcx,%rax,4),%rax
    0.00 :   4a1c4e: add    %rcx,%rax
    0.00 :   4a1c51: notrack jmp *%rax
    0.00 :   4a1c54: nopl   0x0(%rax)
    0.00 :   4a1c58: mov    0x8(%rdx),%rax
    0.00 :   4a1c5c: mov    $0x1,%r9d
    0.00 :   4a1c62: mov    %rax,-0x50(%rsp)
    0.00 :   4a1c67: nopw   0x0(%rax,%rax,1)
    0.00 :   4a1c70: mov    0x10(%rdx),%rax
    0.00 :   4a1c74: add    $0x10,%rdx
    0.00 :   4a1c78: test   %rax,%rax
    0.00 :   4a1c7b: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1c7d: nopl   (%rax)
    0.00 :   4a1c80: test   %r9b,%r9b
    0.00 :   4a1c83: je     4a1c91 <_dl_aux_init+0xb1>
    0.00 :   4a1c85: mov    -0x50(%rsp),%rax
    0.00 :   4a1c8a: mov    %rax,0x9728f(%rip)        # 538f20 <_dl_minsigstacksize>
    0.00 :   4a1c91: test   %r11b,%r11b
    0.00 :   4a1c94: je     4a1ca2 <_dl_aux_init+0xc2>
    0.00 :   4a1c96: mov    -0x48(%rsp),%rax
    0.00 :   4a1c9b: mov    %rax,0x8edae(%rip)        # 530a50 <_dl_random>
    0.00 :   4a1ca2: test   %bl,%bl
    0.00 :   4a1ca4: je     4a1cba <_dl_aux_init+0xda>
    0.00 :   4a1ca6: movl   $0x1,0x974d0(%rip)        # 539180 <__libc_enable_secure_decided>
    0.00 :   4a1cb0: mov    -0x3c(%rsp),%eax
    0.00 :   4a1cb4: mov    %eax,0x8edd6(%rip)        # 530a90 <__libc_enable_secure>
    0.00 :   4a1cba: test   %bpl,%bpl
    0.00 :   4a1cbd: je     4a1ccb <_dl_aux_init+0xeb>
    0.00 :   4a1cbf: mov    -0x38(%rsp),%rax
    0.00 :   4a1cc4: mov    %rax,0x971a5(%rip)        # 538e70 <_dl_sysinfo_dso>
    0.00 :   4a1ccb: test   %r12b,%r12b
    0.00 :   4a1cce: je     4a1cdc <_dl_aux_init+0xfc>
    0.00 :   4a1cd0: movzwl -0x2e(%rsp),%eax
    0.00 :   4a1cd5: mov    %ax,0x904d0(%rip)        # 5321ac <_dl_fpu_control>
    0.00 :   4a1cdc: test   %r13b,%r13b
    0.00 :   4a1cdf: je     4a1ced <_dl_aux_init+0x10d>
    0.00 :   4a1ce1: mov    -0x8(%rsp),%rax
    0.00 :   4a1ce6: mov    %rax,0x971eb(%rip)        # 538ed8 <_dl_hwcap2>
    0.00 :   4a1ced: test   %r14b,%r14b
    0.00 :   4a1cf0: je     4a1cfe <_dl_aux_init+0x11e>
    0.00 :   4a1cf2: mov    -0x10(%rsp),%rax
    0.00 :   4a1cf7: mov    %rax,0x971e2(%rip)        # 538ee0 <_dl_hwcap>
    0.00 :   4a1cfe: cmpb   $0x0,-0x3d(%rsp)
    0.00 :   4a1d03: je     4a1d11 <_dl_aux_init+0x131>
    0.00 :   4a1d05: mov    -0x18(%rsp),%rax
    0.00 :   4a1d0a: mov    %rax,0x9745f(%rip)        # 539170 <_dl_platform>
    0.00 :   4a1d11: cmpb   $0x0,-0x3e(%rsp)
    0.00 :   4a1d16: je     4a1d24 <_dl_aux_init+0x144>
    0.00 :   4a1d18: mov    -0x20(%rsp),%rax
    0.00 :   4a1d1d: mov    %rax,0x971c4(%rip)        # 538ee8 <_dl_phnum>
    0.00 :   4a1d24: cmpb   $0x0,-0x3f(%rsp)
    0.00 :   4a1d29: je     4a1d37 <_dl_aux_init+0x157>
    0.00 :   4a1d2b: mov    -0x28(%rsp),%rax
    0.00 :   4a1d30: mov    %rax,0x971b9(%rip)        # 538ef0 <_dl_phdr>
    0.00 :   4a1d37: test   %r15b,%r15b
    0.00 :   4a1d3a: je     4a1d46 <_dl_aux_init+0x166>
    0.00 :   4a1d3c: mov    -0x2c(%rsp),%eax
    0.00 :   4a1d40: mov    %eax,0x9711a(%rip)        # 538e60 <_dl_clktck>
    0.00 :   4a1d46: test   %r10b,%r10b
    0.00 :   4a1d49: jne    4a1fc9 <_dl_aux_init+0x3e9>
    0.00 :   4a1d4f: cmp    $0xf,%esi
    0.00 :   4a1d52: jne    4a1d6c <_dl_aux_init+0x18c>
    0.00 :   4a1d54: movl   $0x1,0x97422(%rip)        # 539180 <__libc_enable_secure_decided>
    0.00 :   4a1d5e: xor    %eax,%eax
    0.00 :   4a1d60: or     %r8d,%edi
    0.00 :   4a1d63: setne  %al
    0.00 :   4a1d66: mov    %eax,0x8ed24(%rip)        # 530a90 <__libc_enable_secure>
    0.00 :   4a1d6c: pop    %rbx
    0.00 :   4a1d6d: pop    %rbp
    0.00 :   4a1d6e: pop    %r12
    0.00 :   4a1d70: pop    %r13
    0.00 :   4a1d72: pop    %r14
    0.00 :   4a1d74: pop    %r15
    0.00 :   4a1d76: ret
    0.00 :   4a1d77: nopw   0x0(%rax,%rax,1)
    0.00 :   4a1d80: mov    0x8(%rdx),%rax
    0.00 :   4a1d84: add    $0x10,%rdx
    0.00 :   4a1d88: mov    $0x1,%ebp
    0.00 :   4a1d8d: mov    %rax,-0x38(%rsp)
    0.00 :   4a1d92: mov    (%rdx),%rax
    0.00 :   4a1d95: test   %rax,%rax
    0.00 :   4a1d98: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1d9e: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1da3: nopl   0x0(%rax,%rax,1)
    0.00 :   4a1da8: mov    0x8(%rdx),%rax
    0.00 :   4a1dac: add    $0x10,%rdx
    0.00 :   4a1db0: mov    $0x1,%r13d
    0.00 :   4a1db6: mov    %rax,-0x8(%rsp)
    0.00 :   4a1dbb: mov    (%rdx),%rax
    0.00 :   4a1dbe: test   %rax,%rax
    0.00 :   4a1dc1: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1dc7: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1dcc: nopl   0x0(%rax)
    0.00 :   4a1dd0: mov    0x8(%rdx),%rax
    0.00 :   4a1dd4: add    $0x10,%rdx
    0.00 :   4a1dd8: mov    $0x1,%r11d
    0.00 :   4a1dde: mov    %rax,-0x48(%rsp)
    0.00 :   4a1de3: mov    (%rdx),%rax
    0.00 :   4a1de6: test   %rax,%rax
    0.00 :   4a1de9: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1def: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1df4: nopl   0x0(%rax)
    0.00 :   4a1df8: mov    0x8(%rdx),%eax
    0.00 :   4a1dfb: add    $0x10,%rdx
    0.00 :   4a1dff: mov    $0x1,%ebx
    0.00 :   4a1e04: mov    $0xffffffff,%esi
    0.00 :   4a1e09: mov    %eax,-0x3c(%rsp)
    0.00 :   4a1e0d: mov    (%rdx),%rax
    0.00 :   4a1e10: test   %rax,%rax
    0.00 :   4a1e13: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1e19: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1e1e: xchg   %ax,%ax
    0.00 :   4a1e20: movzwl 0x8(%rdx),%eax
    0.00 :   4a1e24: add    $0x10,%rdx
    0.00 :   4a1e28: mov    $0x1,%r12d
    0.00 :   4a1e2e: mov    %ax,-0x2e(%rsp)
    0.00 :   4a1e33: mov    (%rdx),%rax
    0.00 :   4a1e36: test   %rax,%rax
    0.00 :   4a1e39: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1e3f: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1e44: nopl   0x0(%rax)
    0.00 :   4a1e48: mov    0x8(%rdx),%eax
    0.00 :   4a1e4b: add    $0x10,%rdx
    0.00 :   4a1e4f: mov    $0x1,%r15d
    0.00 :   4a1e55: mov    %eax,-0x2c(%rsp)
    0.00 :   4a1e59: mov    (%rdx),%rax
    0.00 :   4a1e5c: test   %rax,%rax
    0.00 :   4a1e5f: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1e65: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1e6a: nopw   0x0(%rax,%rax,1)
    0.00 :   4a1e70: mov    0x8(%rdx),%rax
    0.00 :   4a1e74: add    $0x10,%rdx
    0.00 :   4a1e78: mov    $0x1,%r14d
    0.00 :   4a1e7e: mov    %rax,-0x10(%rsp)
    0.00 :   4a1e83: mov    (%rdx),%rax
    0.00 :   4a1e86: test   %rax,%rax
    0.00 :   4a1e89: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1e8f: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1e94: nopl   0x0(%rax)
    0.00 :   4a1e98: mov    0x8(%rdx),%rax
    0.00 :   4a1e9c: add    $0x10,%rdx
    0.00 :   4a1ea0: movb   $0x1,-0x3d(%rsp)
  100.00 :   4a1ea5: mov    %rax,-0x18(%rsp)
    0.00 :   4a1eaa: mov    (%rdx),%rax
    0.00 :   4a1ead: test   %rax,%rax
    0.00 :   4a1eb0: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1eb6: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1ebb: nopl   0x0(%rax,%rax,1)
    0.00 :   4a1ec0: xor    0x8(%rdx),%edi
    0.00 :   4a1ec3: mov    0x10(%rdx),%rax
    0.00 :   4a1ec7: add    $0x10,%rdx
    0.00 :   4a1ecb: or     $0x8,%esi
    0.00 :   4a1ece: test   %rax,%rax
    0.00 :   4a1ed1: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1ed7: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1edc: nopl   0x0(%rax)
    0.00 :   4a1ee0: xor    0x8(%rdx),%edi
    0.00 :   4a1ee3: mov    0x10(%rdx),%rax
    0.00 :   4a1ee7: add    $0x10,%rdx
    0.00 :   4a1eeb: or     $0x4,%esi
    0.00 :   4a1eee: test   %rax,%rax
    0.00 :   4a1ef1: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1ef7: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1efc: nopl   0x0(%rax)
    0.00 :   4a1f00: xor    0x8(%rdx),%r8d
    0.00 :   4a1f04: mov    0x10(%rdx),%rax
    0.00 :   4a1f08: add    $0x10,%rdx
    0.00 :   4a1f0c: or     $0x2,%esi
    0.00 :   4a1f0f: test   %rax,%rax
    0.00 :   4a1f12: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1f18: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1f1d: nopl   (%rax)
    0.00 :   4a1f20: xor    0x8(%rdx),%r8d
    0.00 :   4a1f24: mov    0x10(%rdx),%rax
    0.00 :   4a1f28: add    $0x10,%rdx
    0.00 :   4a1f2c: or     $0x1,%esi
    0.00 :   4a1f2f: test   %rax,%rax
    0.00 :   4a1f32: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1f38: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1f3d: nopl   (%rax)
    0.00 :   4a1f40: mov    0x8(%rdx),%rax
    0.00 :   4a1f44: test   %rax,%rax
    0.00 :   4a1f47: cmove  -0x58(%rsp),%rax
    0.00 :   4a1f4d: mov    %rax,-0x58(%rsp)
    0.00 :   4a1f52: mov    $0x1,%eax
    0.00 :   4a1f57: cmovne %eax,%r10d
    0.00 :   4a1f5b: mov    0x10(%rdx),%rax
    0.00 :   4a1f5f: add    $0x10,%rdx
    0.00 :   4a1f63: test   %rax,%rax
    0.00 :   4a1f66: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1f6c: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1f71: nopl   0x0(%rax)
    0.00 :   4a1f78: mov    0x8(%rdx),%rax
    0.00 :   4a1f7c: add    $0x10,%rdx
    0.00 :   4a1f80: movb   $0x1,-0x3e(%rsp)
    0.00 :   4a1f85: mov    %rax,-0x20(%rsp)
    0.00 :   4a1f8a: mov    (%rdx),%rax
    0.00 :   4a1f8d: test   %rax,%rax
    0.00 :   4a1f90: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1f96: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1f9b: nopl   0x0(%rax,%rax,1)
    0.00 :   4a1fa0: mov    0x8(%rdx),%rax
    0.00 :   4a1fa4: add    $0x10,%rdx
    0.00 :   4a1fa8: movb   $0x1,-0x3f(%rsp)
    0.00 :   4a1fad: mov    %rax,-0x28(%rsp)
    0.00 :   4a1fb2: mov    (%rdx),%rax
    0.00 :   4a1fb5: test   %rax,%rax
    0.00 :   4a1fb8: jne    4a1c40 <_dl_aux_init+0x60>
    0.00 :   4a1fbe: jmp    4a1c80 <_dl_aux_init+0xa0>
    0.00 :   4a1fc3: nopl   0x0(%rax,%rax,1)
    0.00 :   4a1fc8: ret
    0.00 :   4a1fc9: mov    -0x58(%rsp),%rax
    0.00 :   4a1fce: mov    %rax,0x901e3(%rip)        # 5321b8 <_dl_pagesize>
    0.00 :   4a1fd5: jmp    4a1d4f <_dl_aux_init+0x16f>
